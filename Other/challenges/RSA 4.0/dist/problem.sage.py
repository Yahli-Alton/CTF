

# This file was *autogenerated* from the file problem.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x10001 = Integer(0x10001); _sage_const_1024 = Integer(1024); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_337 = Integer(337); _sage_const_13 = Integer(13); _sage_const_37 = Integer(37); _sage_const_7 = Integer(7); _sage_const_133 = Integer(133)
import os

from Crypto.Util.number import bytes_to_long, getStrongPrime

m = bytes_to_long(os.getenvb(b"FLAG", b"FAKEFLAG{THIS_IS_FAKE}"))
e = _sage_const_0x10001 
p = getStrongPrime(_sage_const_1024 , e=e)
q = getStrongPrime(_sage_const_1024 , e=e)
n = p * q
assert m < n
Q = QuaternionAlgebra(Zmod(n), -_sage_const_1 , -_sage_const_1 )
i, j, k = Q.gens()
enc = (
    _sage_const_1  * m
    + (_sage_const_3  * m + _sage_const_1  * p + _sage_const_337  * q) * i
    + (_sage_const_3  * m + _sage_const_13  * p + _sage_const_37  * q) * j
    + (_sage_const_7  * m + _sage_const_133  * p + _sage_const_7  * q) * k
) ** e
print(f"{n = }")
print(f"{e = }")
print(f"{enc = }")

