

# This file was *autogenerated* from the file solution3.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_17 = Integer(17); _sage_const_19 = Integer(19); _sage_const_23 = Integer(23); _sage_const_29 = Integer(29); _sage_const_31 = Integer(31); _sage_const_37 = Integer(37); _sage_const_41 = Integer(41); _sage_const_43 = Integer(43); _sage_const_47 = Integer(47); _sage_const_53 = Integer(53); _sage_const_59 = Integer(59); _sage_const_61 = Integer(61); _sage_const_67 = Integer(67); _sage_const_71 = Integer(71); _sage_const_73 = Integer(73); _sage_const_79 = Integer(79); _sage_const_83 = Integer(83); _sage_const_89 = Integer(89); _sage_const_97 = Integer(97); _sage_const_101 = Integer(101); _sage_const_103 = Integer(103); _sage_const_107 = Integer(107); _sage_const_109 = Integer(109); _sage_const_113 = Integer(113); _sage_const_127 = Integer(127); _sage_const_131 = Integer(131); _sage_const_137 = Integer(137); _sage_const_139 = Integer(139); _sage_const_149 = Integer(149); _sage_const_151 = Integer(151); _sage_const_157 = Integer(157); _sage_const_163 = Integer(163); _sage_const_167 = Integer(167); _sage_const_173 = Integer(173); _sage_const_179 = Integer(179); _sage_const_181 = Integer(181); _sage_const_191 = Integer(191); _sage_const_193 = Integer(193); _sage_const_197 = Integer(197); _sage_const_199 = Integer(199); _sage_const_211 = Integer(211); _sage_const_223 = Integer(223); _sage_const_227 = Integer(227); _sage_const_229 = Integer(229); _sage_const_233 = Integer(233); _sage_const_239 = Integer(239); _sage_const_241 = Integer(241); _sage_const_251 = Integer(251); _sage_const_257 = Integer(257); _sage_const_263 = Integer(263); _sage_const_269 = Integer(269); _sage_const_271 = Integer(271); _sage_const_277 = Integer(277); _sage_const_281 = Integer(281); _sage_const_283 = Integer(283); _sage_const_293 = Integer(293); _sage_const_307 = Integer(307); _sage_const_311 = Integer(311); _sage_const_313 = Integer(313); _sage_const_317 = Integer(317); _sage_const_331 = Integer(331); _sage_const_337 = Integer(337); _sage_const_347 = Integer(347); _sage_const_349 = Integer(349); _sage_const_353 = Integer(353); _sage_const_359 = Integer(359); _sage_const_367 = Integer(367); _sage_const_373 = Integer(373); _sage_const_379 = Integer(379); _sage_const_383 = Integer(383); _sage_const_389 = Integer(389); _sage_const_397 = Integer(397); _sage_const_401 = Integer(401); _sage_const_409 = Integer(409); _sage_const_419 = Integer(419); _sage_const_421 = Integer(421); _sage_const_431 = Integer(431); _sage_const_256 = Integer(256)
import subprocess

def inv(a, m):
      
    m0 = m 
    x0 = _sage_const_0 
    x1 = _sage_const_1 
  
    if (m == _sage_const_1 ) : 
        return _sage_const_0 
  
    # Apply extended Euclid Algorithm 
    while (a > _sage_const_1 ) : 
        # q is quotient 
        q = a // m 
  
        t = m 
  
        # m is remainder now, process 
        # same as euclid's algo 
        m = a % m 
        a = t 
  
        t = x0 
  
        x0 = x1 - q * x0 
  
        x1 = t 
      
    # Make x1 positive 
    if (x1 < _sage_const_0 ) : 
        x1 = x1 + m0 
  
    return x1 
  
# k is size of num[] and rem[]. 
# Returns the smallest 
# number x such that: 
# x % num[0] = rem[0], 
# x % num[1] = rem[1], 
# .................. 
# x % num[k-2] = rem[k-1] 
# Assumption: Numbers in num[] 
# are pairwise coprime 
# (gcd for every pair is 1) 
def findMinX(num, rem, k) : 
      
    # Compute product of all numbers 
    prod = _sage_const_1 
    for i in range(_sage_const_0 , k) : 
        prod = prod * num[i] 
  
    # Initialize result 
    result = _sage_const_0 
  
    # Apply above formula 
    for i in range(_sage_const_0 ,k): 
        pp = prod // num[i] 
        result = result + rem[i] * inv(pp, num[i]) * pp 
      
      
    return result % prod 

def mod_division(a, b, p):
    return a * pow(b, p - _sage_const_2 , p) % p


def main():
    primes = [
  _sage_const_17 ,
  _sage_const_19 ,
  _sage_const_23 ,
  _sage_const_29 ,
  _sage_const_31 ,
  _sage_const_37 ,
  _sage_const_41 ,
  _sage_const_43 ,
  _sage_const_47 ,
  _sage_const_53 ,
  _sage_const_59 ,
  _sage_const_61 ,
  _sage_const_67 ,
  _sage_const_71 ,
  _sage_const_73 ,
  _sage_const_79 ,
  _sage_const_83 ,
  _sage_const_89 ,
  _sage_const_97 ,
  _sage_const_101 ,
  _sage_const_103 ,
  _sage_const_107 ,
  _sage_const_109 ,
  _sage_const_113 ,
  _sage_const_127 ,
  _sage_const_131 ,
  _sage_const_137 ,
  _sage_const_139 ,
  _sage_const_149 ,
  _sage_const_151 ,
  _sage_const_157 ,
  _sage_const_163 ,
  _sage_const_167 ,
  _sage_const_173 ,
  _sage_const_179 ,
  _sage_const_181 ,
  _sage_const_191 ,
  _sage_const_193 ,
  _sage_const_197 ,
  _sage_const_199 ,
  _sage_const_211 ,
  _sage_const_223 ,
  _sage_const_227 ,
  _sage_const_229 ,
  _sage_const_233 ,
  _sage_const_239 ,
  _sage_const_241 ,
  _sage_const_251 ,
  _sage_const_257 ,
  _sage_const_263 ,
  _sage_const_269 ,
  _sage_const_271 ,
  _sage_const_277 ,
  _sage_const_281 ,
  _sage_const_283 ,
  _sage_const_293 ,
  _sage_const_307 ,
  _sage_const_311 ,
  _sage_const_313 ,
  _sage_const_317 ,
  _sage_const_331 ,
  _sage_const_337 ,
  _sage_const_347 ,
  _sage_const_349 ,
  _sage_const_353 ,
  _sage_const_359 ,
  _sage_const_367 ,
  _sage_const_373 ,
  _sage_const_379 ,
  _sage_const_383 ,
  _sage_const_389 ,
  _sage_const_397 ,
  _sage_const_401 ,
  _sage_const_409 ,
  _sage_const_419 ,
  _sage_const_421 ,
  _sage_const_431 ]
    limit = _sage_const_2  ** _sage_const_256 

    i = _sage_const_0 
    mul = _sage_const_1 
    while mul < limit:
        mul *= primes[i]
        i += _sage_const_1 

    primes = primes[:i + _sage_const_1 ]
    # primes = primes[:30]
    print(len(primes))


    inverses = []
    vectors = []
    for prime in primes:
        A = matrix(GF(prime), [
            [(row + _sage_const_1 ) ** (col + _sage_const_1 ) for col in range(prime - _sage_const_2 )] for row in range(prime - _sage_const_2 )
        ])
        inverses.append(A**-_sage_const_1 )
        vectors.append(inverses[-_sage_const_1 ] * vector(GF(prime), [_sage_const_1 ] * (prime - _sage_const_2 )))
        print(prime)


    possibilities_per_prime = [set(range(prime)) for prime in primes]

    num = []
    rem = []

    # p = subprocess.Popen(["python3", "server.py"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p = subprocess.Popen(["nc", "chal-share.chal.hitconctf.com", "11111"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    done = False

    while not done:
        done = True
        request = b""

        for i, (prime, possibilities) in enumerate(zip(primes, possibilities_per_prime)):
            if len(possibilities) != _sage_const_1 :
                request += str(prime).encode() + b"\n" + str(prime - _sage_const_1 ).encode() + b"\n"
                done = False

        p.stdin.write(request)
        p.stdin.flush()

        for i, (prime, possibilities) in enumerate(zip(primes, possibilities_per_prime)):
            if len(possibilities) != _sage_const_1 :
                output = p.stdout.readline()
                shares = vector(GF(prime), eval(output[output.index(b"["):-_sage_const_1 ]))
                shares = inverses[i] * shares

                for j in range(prime - _sage_const_2 ):
                    possibilities.discard(mod_division(shares[j] + _sage_const_1 , vectors[i][j], prime))

    for i, (prime, possibilities) in enumerate(zip(primes, possibilities_per_prime)):
        num.append(prime)
        rem.append(list(possibilities)[_sage_const_0 ])
    
    p.stdin.write(b"2\n2\n" + str(findMinX(num, rem, len(num)) % limit).encode() + b"\n")
    p.stdin.flush()
    print(p.stdout.readline())

if __name__ == "__main__":
    main()

