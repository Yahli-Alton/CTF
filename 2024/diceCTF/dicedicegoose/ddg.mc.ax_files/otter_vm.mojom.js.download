// third_party/blink/public/mojom/otter/otter_vm.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/otter/otter_vm.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');



  function OtterVM_Init_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OtterVM_Init_Params.prototype.initDefaults_ = function() {
    this.data = null;
    this.entry = 0;
  };
  OtterVM_Init_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OtterVM_Init_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OtterVM_Init_Params.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  OtterVM_Init_Params.encodedSize = codec.kStructHeaderSize + 16;

  OtterVM_Init_Params.decode = function(decoder) {
    var packed;
    var val = new OtterVM_Init_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeArrayPointer(codec.Uint8);
    val.entry =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  OtterVM_Init_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OtterVM_Init_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.data);
    encoder.encodeStruct(codec.Uint64, val.entry);
  };
  function OtterVM_Init_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OtterVM_Init_ResponseParams.prototype.initDefaults_ = function() {
  };
  OtterVM_Init_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OtterVM_Init_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OtterVM_Init_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  OtterVM_Init_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new OtterVM_Init_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  OtterVM_Init_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OtterVM_Init_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function OtterVM_Run_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OtterVM_Run_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  OtterVM_Run_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OtterVM_Run_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OtterVM_Run_Params.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OtterVM_Run_Params.encodedSize = codec.kStructHeaderSize + 8;

  OtterVM_Run_Params.decode = function(decoder) {
    var packed;
    var val = new OtterVM_Run_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  OtterVM_Run_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OtterVM_Run_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.data);
  };
  function OtterVM_Run_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OtterVM_Run_ResponseParams.prototype.initDefaults_ = function() {
    this.resp = null;
  };
  OtterVM_Run_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OtterVM_Run_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OtterVM_Run_ResponseParams.resp
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OtterVM_Run_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  OtterVM_Run_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new OtterVM_Run_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resp =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  OtterVM_Run_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OtterVM_Run_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.resp);
  };
  var kOtterVM_Init_Name = 0;
  var kOtterVM_Run_Name = 1;

  function OtterVMPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(OtterVM,
                                                   handleOrPtrInfo);
  }

  function OtterVMAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        OtterVM, associatedInterfacePtrInfo);
  }

  OtterVMAssociatedPtr.prototype =
      Object.create(OtterVMPtr.prototype);
  OtterVMAssociatedPtr.prototype.constructor =
      OtterVMAssociatedPtr;

  function OtterVMProxy(receiver) {
    this.receiver_ = receiver;
  }
  OtterVMPtr.prototype.init = function() {
    return OtterVMProxy.prototype.init
        .apply(this.ptr.getProxy(), arguments);
  };

  OtterVMProxy.prototype.init = function(data, entry) {
    var params_ = new OtterVM_Init_Params();
    params_.data = data;
    params_.entry = entry;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kOtterVM_Init_Name,
          codec.align(OtterVM_Init_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(OtterVM_Init_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(OtterVM_Init_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  OtterVMPtr.prototype.run = function() {
    return OtterVMProxy.prototype.run
        .apply(this.ptr.getProxy(), arguments);
  };

  OtterVMProxy.prototype.run = function(data) {
    var params_ = new OtterVM_Run_Params();
    params_.data = data;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kOtterVM_Run_Name,
          codec.align(OtterVM_Run_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(OtterVM_Run_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(OtterVM_Run_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function OtterVMStub(delegate) {
    this.delegate_ = delegate;
  }
  OtterVMStub.prototype.init = function(data, entry) {
    return this.delegate_ && this.delegate_.init && this.delegate_.init(data, entry);
  }
  OtterVMStub.prototype.run = function(data) {
    return this.delegate_ && this.delegate_.run && this.delegate_.run(data);
  }

  OtterVMStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  OtterVMStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kOtterVM_Init_Name:
      var params = reader.decodeStruct(OtterVM_Init_Params);
      this.init(params.data, params.entry).then(function(response) {
        var responseParams =
            new OtterVM_Init_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kOtterVM_Init_Name,
            codec.align(OtterVM_Init_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(OtterVM_Init_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kOtterVM_Run_Name:
      var params = reader.decodeStruct(OtterVM_Run_Params);
      this.run(params.data).then(function(response) {
        var responseParams =
            new OtterVM_Run_ResponseParams();
        responseParams.resp = response.resp;
        var builder = new codec.MessageV1Builder(
            kOtterVM_Run_Name,
            codec.align(OtterVM_Run_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(OtterVM_Run_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateOtterVMRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kOtterVM_Init_Name:
        if (message.expectsResponse())
          paramsClass = OtterVM_Init_Params;
      break;
      case kOtterVM_Run_Name:
        if (message.expectsResponse())
          paramsClass = OtterVM_Run_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateOtterVMResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kOtterVM_Init_Name:
        if (message.isResponse())
          paramsClass = OtterVM_Init_ResponseParams;
        break;
      case kOtterVM_Run_Name:
        if (message.isResponse())
          paramsClass = OtterVM_Run_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var OtterVM = {
    name: 'blink.mojom.OtterVM',
    kVersion: 0,
    ptrClass: OtterVMPtr,
    proxyClass: OtterVMProxy,
    stubClass: OtterVMStub,
    validateRequest: validateOtterVMRequest,
    validateResponse: validateOtterVMResponse,
  };
  OtterVMStub.prototype.validator = validateOtterVMRequest;
  OtterVMProxy.prototype.validator = validateOtterVMResponse;
  exports.OtterVM = OtterVM;
  exports.OtterVMPtr = OtterVMPtr;
  exports.OtterVMAssociatedPtr = OtterVMAssociatedPtr;
})();