import numpy as np
from Crypto.Util.number import isPrime
from math import isqrt

n = 10565111742779621369865244442986012561396692673454910362609046015925986143478477636135123823568238799221073736640238782018226118947815621060733362956285282617024125831451239252829020159808921127494956720795643829784184023834660903398677823590748068165468077222708643934113813031996923649853965683973247210221430589980477793099978524923475037870799
e = 65537
ct = 9953835612864168958493881125012168733523409382351354854632430461608351532481509658102591265243759698363517384998445400450605072899351246319609602750009384658165461577933077010367041079697256427873608015844538854795998933587082438951814536702595878846142644494615211280580559681850168231137824062612646010487818329823551577905707110039178482377985

def i_root(num, root):
    i = num.bit_length() // root
    m = 1 << i
    while m ** root < num:
        m <<= 1
        i += 1
    while m ** root > num:
        m >>= 1
        i -= 1
    for k in range(i-1, -1, -1):
        x = m | (1 << k)
        if x ** root <= num:
            m = x
    return m

poly = np.polymul(np.polymul([1, 0], [1, 6]), [1, 12])
poly = list(poly)
poly[-1] = -n

a, b, c, d = poly

d0 = b ** 2 - 3 * a * c
d1 = 2 * b ** 3 - 9 * a * b * c + 27 * a ** 2 * d
C = -i_root(-d1, 3)

x = -(b + C) // (3 * a)

for i in range(-10, 10):
    p = x + i
    if isPrime(x + i) and p * (p + 6) * (p + 12) == n:
        print(f"{p=}")
