from sage.all import *

# z2 = 23
p, N, v, t = 23 ** 2, 100, 4, 41
# p = 293 # TODO: remove
F = GF(p)
# r = matrix([(16*z2 + 19, 14*z2, 11*z2 + 5, 18*z2 + 4), (z2 + 3, 8*z2 + 18, 11*z2 + 9, 6*z2 + 22), (7*z2 + 9, 7*z2 + 9, 19*z2 + 16, 15*z2 + 20), (19*z2 + 7, 14*z2 + 20, 7*z2 + 12, 14*z2 + 16), (20*z2 + 17, 10*z2 + 7, 22*z2 + 19, 4*z2 + 2), (21*z2 + 10, 15*z2 + 15, 6*z2 + 10, 4*z2 + 7), (20*z2 + 5, z2 + 10, 20*z2 + 20, 12*z2 + 4), (13*z2 + 9, 22*z2 + 8, 4*z2 + 14, 12), (16*z2 + 9, 8*z2 + 17, 4*z2 + 14, 20*z2 + 8), (21*z2 + 9, 3*z2 + 11, z2 + 21, 18*z2 + 18), (3*z2 + 7, z2 + 14, 20*z2 + 11, 17*z2 + 15), (18*z2 + 13, 9*z2 + 9, 10*z2 + 1, 13*z2 + 20), (7*z2 + 16, 3*z2 + 14, 16*z2 + 13, 14*z2 + 4), (3*z2 + 20, 13*z2 + 20, 10*z2 + 17, 8*z2 + 20), (13*z2 + 22, 11*z2 + 4, 5*z2 + 15, z2 + 15), (11*z2 + 21, 6*z2 + 12, 17*z2 + 21, 9*z2 + 6), (16*z2 + 13, 7*z2 + 11, 9*z2 + 16, 4*z2 + 8), (14*z2, 15*z2 + 11, 18*z2 + 15, 19), (z2 + 20, 7*z2 + 6, 17*z2 + 18, 22*z2 + 12), (7*z2 + 4, 15*z2 + 15, 20*z2 + 8, 3*z2 + 1), (4*z2 + 17, 20*z2 + 22, 6*z2 + 1, 2*z2 + 1), (15*z2 + 22, 22*z2 + 8, 7*z2 + 13, 8*z2 + 6), (21*z2 + 21, 9*z2 + 19, 10*z2 + 4, 15*z2 + 10), (9*z2 + 22, 22*z2 + 16, 9*z2 + 20, 8), (6*z2 + 21, 3*z2 + 19, 2*z2 + 18, 18*z2 + 14), (19*z2 + 10, 10*z2 + 21, 15*z2 + 12, 15*z2 + 15), (12*z2 + 6, 10*z2 + 8, 7*z2 + 13, z2 + 15), (22*z2 + 12, 17*z2 + 8, 17*z2 + 12, 11*z2 + 4), (7*z2 + 22, z2 + 12, 12*z2 + 7, 5*z2 + 15), (18*z2 + 2, 14*z2 + 14, 3*z2 + 21, 3*z2 + 13), (20*z2 + 3, 4, 4*z2 + 4, 5*z2 + 6), (19*z2 + 16, z2 + 10, 15*z2 + 1, 2*z2 + 11), (z2 + 14, 12*z2 + 10, 3*z2 + 6, 7*z2 + 14), (11*z2 + 15, 22*z2 + 17, 8*z2 + 7, 3*z2 + 14), (14*z2 + 15, 21*z2 + 11, 3*z2 + 22, 7*z2 + 9), (16*z2 + 5, 8*z2 + 21, 11*z2 + 15, 22*z2), (z2 + 8, 4*z2 + 21, 6*z2 + 6, 21*z2 + 3), (15*z2 + 20, 2, 7*z2 + 7, 14), (15*z2 + 20, 9*z2 + 14, 14*z2 + 11, 9*z2 + 4), (5*z2 + 8, 18*z2 + 16, 7*z2 + 18, 9*z2 + 20), (13*z2 + 9, 20*z2 + 8, 21*z2 + 2, 18*z2 + 5), (2*z2 + 11, 21*z2 + 20, 10*z2 + 21, 10*z2 + 21), (4*z2 + 7, 12*z2 + 8, 5*z2 + 8, 4*z2 + 16), (10*z2 + 11, 4*z2 + 18, 16*z2 + 20, 5), (17, 8*z2 + 15, 7*z2 + 19, 3*z2 + 14), (11*z2, 10*z2 + 2, 14*z2 + 4, 6*z2 + 20), (19*z2 + 3, 18*z2 + 1, 22*z2 + 2, 6*z2 + 4), (17*z2 + 11, 6*z2 + 22, 14*z2 + 20, 21*z2 + 9), (19*z2, 9*z2 + 15, 6*z2 + 8, 9*z2 + 16), (15*z2 + 15, 8*z2, 6*z2 + 1, 20*z2 + 5), (16, 19, 6*z2 + 14, 20*z2 + 17), (2*z2 + 22, 13*z2 + 14, 9*z2 + 8, 3*z2 + 20), (z2 + 10, 11*z2 + 19, 11*z2 + 22, 15*z2 + 11), (z2 + 14, z2 + 15, 5*z2 + 8, 8*z2 + 18), (z2 + 10, 7*z2 + 14, z2 + 3, 5*z2 + 18), (7*z2 + 2, 21*z2 + 19, 7*z2 + 5, 7*z2 + 6), (6*z2 + 18, 22*z2 + 4, 16*z2 + 6, 16*z2 + 8), (11*z2 + 13, 6*z2 + 11, 16*z2 + 17, 15*z2 + 3), (5*z2 + 22, 20*z2 + 19, 9*z2 + 22, 14*z2 + 14), (14*z2 + 9, 9*z2 + 3, z2 + 3, 17*z2 + 2), (15*z2 + 17, z2 + 7, 18*z2 + 18, 4*z2 + 13), (z2 + 17, 4*z2 + 14, 2*z2 + 9, 13*z2 + 5), (19*z2 + 17, 10*z2 + 20, 17, 5*z2 + 21), (12*z2 + 3, 8*z2 + 15, 22*z2 + 14, 2*z2 + 9), (9*z2 + 6, 18*z2 + 1, 21*z2 + 9, 6*z2 + 1), (18*z2 + 10, 16*z2 + 6, 10, 3*z2 + 14), (17*z2 + 3, 5*z2 + 19, 8*z2 + 21, 14*z2 + 15), (7*z2 + 20, 18*z2 + 18, 11*z2 + 4, z2 + 8), (22*z2 + 9, z2 + 3, 2*z2 + 17, 13*z2 + 9), (15*z2 + 9, 19*z2 + 9, 18*z2 + 7, 7), (22*z2 + 3, 18*z2 + 6, 16*z2 + 14, 22*z2 + 19), (11, 14*z2 + 6, 8*z2 + 20, 20*z2 + 22), (13*z2 + 21, 16*z2 + 4, 12*z2 + 19, 19*z2 + 20), (10*z2 + 3, 19*z2 + 1, 6*z2 + 2, 8*z2 + 14), (22*z2 + 9, 13*z2 + 16, 13*z2 + 8, 3*z2 + 9), (14*z2, 9*z2, 19*z2 + 6, 19), (21*z2, 13, 17*z2 + 6, 4*z2 + 7), (22*z2 + 13, 22*z2 + 21, 7*z2 + 16, z2 + 13), (z2 + 19, 22*z2 + 21, 9*z2, 6*z2 + 18), (21*z2 + 17, 3*z2 + 21, 14*z2 + 11, 6*z2 + 19), (5*z2 + 10, 16*z2 + 13, 9*z2, 14*z2 + 1), (5*z2 + 3, 10*z2 + 4, 6, 8), (2*z2 + 14, 5*z2 + 18, 16*z2 + 4, 13*z2 + 17), (8*z2, 18*z2 + 20, 6*z2 + 5, 2*z2 + 3), (17*z2 + 11, 13*z2 + 12, 8*z2 + 9, 20*z2 + 15), (7*z2 + 20, 17, 22*z2 + 6, 12*z2), (12*z2 + 20, 16*z2 + 14, 10*z2 + 22, 18*z2 + 6), (12*z2 + 19, 8*z2 + 1, 22*z2 + 9, 16*z2 + 8), (4*z2 + 10, 5*z2 + 5, z2 + 6, 5*z2 + 11), (13*z2 + 4, 21*z2 + 14, 8*z2 + 3, 16*z2 + 3), (4*z2 + 13, 8*z2 + 13, 19*z2 + 6, 4*z2 + 14), (17*z2 + 21, 21*z2 + 10, 10*z2 + 22, 11*z2 + 1), (21*z2 + 5, 21*z2 + 9, 7*z2 + 2, 12*z2), (z2 + 11, 6*z2 + 22, 6*z2 + 11, 13*z2 + 16), (3*z2 + 3, 9*z2 + 3, 17*z2 + 7, 15*z2 + 22), (3*z2 + 18, 20*z2 + 1, 13*z2 + 21, 20*z2 + 3), (19*z2 + 13, 11*z2 + 18, 16*z2 + 14, 3*z2 + 5), (13, 17*z2 + 8, 19*z2 + 13, 9*z2 + 22), (21*z2 + 11, 22*z2 + 12, 21*z2 + 21, 15*z2 + 14), (z2 + 20, 14*z2 + 8, 14*z2 + 20, 9*z2 + 16)])
# A = matrix([(5*z2 + 1, 15*z2 + 8, 7*z2 + 16, 10*z2 + 4), (0, 20, 22*z2 + 6, 8*z2 + 12), (0, 0, 22*z2 + 6, 20*z2 + 22), (0, 0, 0, 10*z2 + 16)])
# r = [(18*z2 + 6, 17*z2 + 9, 15*z2 + 1, 8*z2 + 22), (11*z2 + 16, 18*z2 + 12, 17, 22*z2 + 20), (10*z2 + 2, 21*z2 + 20, 6, 3*z2), (7*z2 + 15, 7*z2 + 17, 2*z2 + 15, 5*z2 + 16), (10*z2 + 8, 13*z2 + 8, 18*z2 + 1, 11*z2 + 1), (19*z2 + 16, z2 + 3, 6*z2 + 8, 22*z2 + 21), (9*z2 + 13, 12*z2 + 20, 7*z2 + 22, 16*z2 + 3), (14*z2 + 9, z2 + 19, 9*z2 + 15, 13*z2 + 22), (10*z2 + 4, 6*z2 + 4, 9, 12*z2 + 9), (12*z2 + 18, z2 + 20, 16*z2 + 22, 21*z2 + 13), (13*z2 + 2, 21*z2 + 1, 15*z2 + 15, 12*z2 + 18), (21*z2 + 10, 15, 20*z2 + 5, 13), (4*z2 + 4, 7*z2 + 11, 18*z2 + 22, 7*z2 + 4), (18*z2 + 17, 11*z2 + 2, 16*z2 + 10, z2 + 20), (21*z2 + 17, 11*z2 + 22, 19, 15*z2 + 18), (4*z2 + 19, 19*z2 + 10, 18*z2 + 19, 12*z2 + 14), (21*z2 + 19, 5*z2 + 15, 10*z2 + 20, 12*z2 + 2), (11, 19*z2 + 19, 2*z2 + 2, 4*z2 + 20), (13*z2 + 15, 18*z2 + 22, 10*z2 + 13, 17*z2 + 3), (10*z2 + 3, 22*z2 + 2, 16*z2 + 5, 22*z2 + 17), (17*z2 + 20, 13*z2 + 16, 2*z2 + 4, 14*z2 + 8), (8*z2 + 12, 21*z2 + 12, 3*z2 + 11, 16*z2 + 22), (20*z2 + 11, 13*z2 + 2, 12*z2 + 6, 11*z2 + 20), (22*z2 + 18, 21*z2 + 22, 2*z2 + 7, 21*z2 + 15), (7*z2 + 10, 3*z2, 9*z2 + 3, 9*z2 + 1), (16*z2 + 15, 17*z2 + 4, 4*z2 + 11, 7*z2 + 20), (4*z2 + 20, 12*z2 + 11, 12*z2 + 15, 4*z2 + 8), (4*z2 + 21, 15*z2 + 7, 18*z2 + 12, 17*z2 + 5), (21*z2 + 8, 5*z2 + 10, 10*z2 + 11, 12*z2 + 20), (14*z2 + 1, 15*z2 + 1, 8*z2 + 18, 5*z2 + 18), (16*z2 + 6, 5*z2 + 14, 9*z2 + 4, 8*z2 + 22), (7*z2 + 21, 14, 13, 2*z2 + 13), (17*z2 + 6, z2 + 13, 15*z2 + 19, 17*z2 + 2), (z2 + 19, 12*z2 + 11, 21*z2 + 17, 17*z2 + 21), (14*z2 + 12, 9*z2 + 15, 3*z2 + 15, 22*z2 + 5), (2*z2 + 19, 22*z2 + 18, 10*z2 + 22, 15), (17*z2 + 19, 7*z2 + 22, 17*z2, 17*z2 + 11), (22, 16*z2 + 5, 7*z2 + 1, 11*z2 + 8), (4*z2 + 11, 2*z2 + 8, 8*z2 + 13, 10*z2 + 4), (8*z2, 6*z2 + 11, 15*z2 + 4, 2*z2 + 19), (3*z2 + 9, 2*z2 + 1, 19*z2 + 13, 10*z2 + 18), (15*z2 + 13, 14*z2 + 14, 2*z2 + 8, 16*z2 + 16), (19*z2 + 16, 16*z2 + 20, 14*z2 + 13, 3*z2), (6*z2 + 10, 5*z2 + 21, 19*z2 + 17, 21*z2 + 19), (7*z2 + 20, 10*z2, 11*z2 + 3, 5*z2 + 12), (15*z2 + 21, 8*z2 + 13, 20*z2 + 1, 10*z2 + 11), (20*z2 + 8, 11*z2 + 12, 20*z2 + 4, 3*z2 + 13), (z2 + 6, 12*z2 + 22, 19*z2 + 11, 11*z2 + 9), (14*z2 + 20, 7*z2 + 13, 22*z2 + 5, 10*z2 + 12), (17*z2 + 20, 11, 21*z2 + 11, 11*z2 + 21), (15*z2 + 6, 8*z2 + 4, 14*z2, 12*z2 + 3), (12*z2 + 11, 12*z2 + 9, 12*z2 + 1, 12*z2 + 14), (7, 20*z2 + 19, 3*z2 + 12, 2*z2 + 6), (15, 21, 21*z2 + 2, 18*z2 + 20), (2*z2 + 13, 5*z2 + 8, 21*z2 + 11, 6*z2 + 20), (18*z2 + 5, 22*z2 + 12, 22*z2 + 6, 2*z2 + 6), (7*z2 + 9, 6*z2 + 19, 22*z2 + 6, 15*z2 + 11), (17*z2 + 2, 13*z2 + 12, 11*z2 + 15, 14*z2 + 2), (16*z2 + 17, 5*z2 + 16, 7*z2 + 11, 20*z2 + 21), (8*z2 + 8, 5*z2 + 9, 2*z2, 16*z2 + 2), (10*z2 + 7, 20*z2 + 3, 3*z2 + 14, 11*z2 + 6), (15*z2 + 19, 11*z2 + 2, 12*z2, 22*z2 + 2), (16*z2 + 7, 6*z2 + 5, 18*z2 + 2, 21*z2 + 15), (10*z2 + 13, 10*z2 + 4, 17*z2 + 13, 6*z2 + 19), (21*z2 + 13, 10*z2 + 20, 18*z2 + 7, 5*z2), (8*z2 + 4, 19*z2 + 9, 9*z2 + 12, 2*z2 + 2), (20*z2 + 19, 16*z2 + 12, 5*z2 + 22, 5*z2 + 8), (21*z2, 21*z2 + 15, 7*z2 + 13, 5*z2 + 3), (20*z2 + 16, 8*z2 + 22, 2*z2 + 17, 4*z2 + 4), (4*z2 + 4, z2 + 6, 22*z2 + 16, 19*z2 + 2), (2*z2 + 5, 20*z2 + 20, 6*z2 + 13, 8*z2 + 3), (13*z2 + 13, 21*z2 + 16, 15*z2 + 19, 8*z2 + 8), (6*z2 + 2, 4*z2 + 12, 9*z2 + 22, 9*z2 + 21), (z2 + 18, 8*z2 + 13, 14*z2 + 13, 16*z2 + 18), (13*z2 + 15, 5*z2 + 10, 19, 10*z2 + 6), (13*z2 + 11, 10*z2 + 18, 3*z2 + 22, 5*z2 + 8), (17*z2 + 10, 21*z2 + 1, 20*z2 + 12, 18*z2 + 4), (3*z2 + 2, 10, 20*z2, 7*z2 + 11), (2*z2 + 21, 17*z2 + 18, 17*z2 + 17, 16*z2 + 19), (17*z2 + 20, 5*z2 + 19, 4*z2 + 8, 18*z2 + 20), (5*z2 + 13, 11*z2, 8*z2 + 4, 4*z2 + 17), (7*z2 + 10, 12*z2 + 6, 11*z2 + 2, 6*z2 + 2), (21*z2 + 8, 4*z2 + 19, 4*z2 + 20, 15*z2 + 7), (14*z2 + 2, 17*z2 + 5, 15*z2 + 16, 3*z2 + 16), (5*z2 + 22, 17*z2 + 21, 8*z2 + 1, 10), (11*z2 + 19, 16*z2, 2*z2 + 20, 11*z2 + 13), (12*z2 + 11, 9*z2 + 1, 17, 14*z2 + 9), (9*z2 + 22, 8*z2 + 3, 8*z2 + 1, 7*z2 + 19), (12*z2 + 10, 8*z2 + 4, 7*z2 + 14, 7*z2 + 13), (21*z2 + 17, 8*z2 + 7, 22*z2 + 9, 16*z2 + 17), (22, 9*z2 + 18, z2 + 2, 13*z2 + 20), (22*z2, 15*z2 + 5, 17*z2 + 18, 10*z2 + 3), (21*z2 + 10, 21*z2 + 5, 3*z2 + 21, 14*z2 + 8), (6*z2 + 13, 14*z2 + 12, 14*z2 + 21, 7*z2 + 8), (19*z2 + 13, 11*z2 + 1, 12*z2 + 16, 19*z2 + 3), (18*z2 + 19, 15*z2 + 6, 17*z2 + 20, 17*z2 + 11), (20*z2 + 22, 5*z2 + 16, 12*z2 + 5, 6), (19*z2 + 8, 3*z2 + 8, z2 + 19, 11*z2 + 17), (9*z2 + 7, 5*z2 + 19, 10*z2 + 20, 8*z2 + 10), (8*z2 + 21, 7*z2 + 7, 17*z2 + 11, 4*z2 + 21)]
# A = [(6*z2 + 2, 16*z2 + 7, 12*z2 + 9, 16*z2 + 13), (0, 5*z2 + 19, 16*z2 + 22, 7), (0, 0, 8*z2 + 15, 3*z2 + 5), (0, 0, 0, 2*z2 + 18)]
# r = [(225, 115, 76, 117), (278, 180, 16, 28), (103, 147, 42, 187), (120, 79, 109, 32), (4, 220, 171, 134), (229, 99, 158, 14), (216, 290, 287, 180), (71, 29, 284, 127), (196, 92, 31, 153), (219, 151, 100, 27), (282, 26, 237, 66), (203, 66, 241, 43), (131, 73, 90, 128), (231, 167, 29, 252), (48, 88, 171, 11), (60, 156, 231, 288), (45, 44, 287, 200), (132, 107, 37, 69), (277, 75, 86, 20), (172, 236, 187, 285), (236, 0, 208, 165), (154, 187, 34, 70), (2, 18, 264, 207), (91, 266, 17, 64), (51, 257, 101, 20), (75, 122, 214, 184), (146, 188, 58, 71), (49, 209, 62, 102), (287, 196, 154, 27), (276, 143, 132, 19), (255, 143, 231, 124), (183, 128, 179, 253), (127, 206, 267, 176), (12, 234, 113, 21), (99, 237, 57, 98), (238, 73, 110, 225), (75, 229, 59, 196), (98, 235, 262, 90), (209, 138, 229, 239), (140, 231, 20, 62), (43, 272, 53, 210), (56, 158, 71, 86), (158, 49, 168, 2), (151, 2, 174, 162), (263, 120, 161, 4), (73, 43, 259, 247), (113, 259, 11, 135), (128, 125, 60, 236), (135, 270, 252, 14), (238, 152, 115, 20), (179, 219, 263, 170), (247, 159, 283, 158), (33, 285, 256, 55), (251, 260, 109, 217), (45, 195, 247, 110), (260, 272, 6, 270), (221, 284, 219, 266), (80, 5, 2, 176), (152, 140, 214, 292), (6, 44, 276, 8), (259, 253, 138, 189), (114, 132, 161, 96), (90, 96, 25, 164), (142, 27, 105, 82), (51, 10, 151, 84), (15, 263, 114, 208), (187, 205, 206, 15), (88, 288, 228, 292), (32, 198, 91, 190), (3, 76, 147, 6), (141, 21, 127, 261), (126, 112, 67, 171), (124, 213, 290, 156), (235, 122, 138, 78), (220, 87, 83, 115), (185, 239, 28, 125), (117, 125, 14, 69), (13, 159, 86, 186), (36, 124, 168, 105), (131, 28, 240, 155), (257, 268, 103, 120), (254, 3, 109, 229), (276, 57, 159, 129), (14, 89, 267, 212), (284, 169, 20, 95), (166, 41, 232, 39), (21, 58, 61, 102), (169, 116, 45, 107), (170, 23, 181, 108), (186, 205, 145, 8), (95, 214, 287, 128), (53, 223, 235, 27), (175, 20, 194, 119), (206, 86, 111, 162), (178, 199, 79, 36), (50, 170, 97, 246), (154, 170, 164, 153), (148, 291, 16, 97), (66, 154, 211, 254), (114, 55, 269, 207)]
# A = [(113, 287, 173, 151), (0, 207, 181, 158), (0, 0, 171, 6), (0, 0, 0, 163)]
# r = "[(279, 222, 256, 261), (40, 274, 8, 65), (116, 138, 181, 249), (266, 49, 291, 84), (106, 74, 48, 18), (73, 270, 244, 94), (10, 102, 282, 40), (6, 5, 14, 147), (161, 179, 96, 205), (2, 52, 176, 55), (127, 15, 73, 262), (240, 149, 256, 31), (139, 66, 165, 107), (169, 64, 123, 0), (64, 145, 88, 159), (133, 233, 186, 177), (173, 78, 142, 187), (234, 256, 119, 261), (238, 60, 254, 232), (225, 85, 30, 173), (152, 6, 48, 247), (273, 27, 138, 200), (190, 7, 105, 173), (148, 49, 126, 198), (157, 119, 97, 167), (93, 285, 261, 37), (99, 233, 62, 122), (260, 157, 35, 82), (16, 86, 47, 198), (143, 209, 42, 170), (199, 57, 49, 90), (98, 56, 218, 69), (252, 88, 69, 144), (261, 185, 176, 278), (29, 267, 171, 259), (49, 101, 133, 180), (162, 47, 158, 181), (227, 11, 14, 25), (224, 214, 0, 25), (115, 250, 5, 251), (276, 113, 209, 264), (46, 234, 17, 106), (67, 290, 17, 256), (281, 86, 77, 213), (80, 184, 113, 194), (250, 5, 108, 0), (187, 91, 205, 150), (147, 94, 265, 151), (226, 279, 215, 212), (49, 286, 282, 54), (11, 9, 213, 16), (25, 287, 40, 291), (102, 67, 254, 257), (112, 112, 9, 84), (15, 261, 92, 206), (88, 121, 225, 44), (192, 243, 248, 84), (208, 15, 281, 272), (83, 208, 130, 234), (277, 5, 64, 163), (286, 248, 147, 226), (115, 82, 88, 39), (53, 110, 146, 273), (12, 100, 279, 170), (157, 134, 248, 169), (253, 228, 60, 288), (185, 77, 14, 278), (156, 29, 200, 281), (110, 261, 129, 143), (285, 231, 125, 286), (210, 284, 232, 218), (292, 95, 28, 66), (60, 44, 206, 203), (57, 7, 230, 192), (97, 261, 173, 11), (288, 36, 72, 264), (274, 126, 266, 257), (63, 142, 56, 229), (197, 99, 115, 118), (139, 287, 95, 286), (96, 118, 249, 148), (225, 286, 184, 254), (143, 130, 147, 101), (158, 107, 94, 103), (24, 222, 188, 9), (241, 190, 141, 167), (237, 69, 114, 214), (233, 248, 67, 195), (35, 59, 189, 290), (90, 0, 71, 114), (235, 98, 131, 43), (54, 160, 9, 110), (217, 29, 164, 167), (232, 119, 216, 132), (209, 201, 188, 264), (62, 20, 175, 88), (273, 203, 129, 30), (289, 83, 47, 30), (117, 113, 227, 234), (282, 76, 3, 167)]"
# A = "[(187, 253, 177, 80), (0, 214, 210, 115), (0, 0, 50, 155), (0, 0, 0, 124)]"
r = "[(16*z2 + 19, 14*z2, 11*z2 + 5, 18*z2 + 4), (z2 + 3, 8*z2 + 18, 11*z2 + 9, 6*z2 + 22), (7*z2 + 9, 7*z2 + 9, 19*z2 + 16, 15*z2 + 20), (19*z2 + 7, 14*z2 + 20, 7*z2 + 12, 14*z2 + 16), (20*z2 + 17, 10*z2 + 7, 22*z2 + 19, 4*z2 + 2), (21*z2 + 10, 15*z2 + 15, 6*z2 + 10, 4*z2 + 7), (20*z2 + 5, z2 + 10, 20*z2 + 20, 12*z2 + 4), (13*z2 + 9, 22*z2 + 8, 4*z2 + 14, 12), (16*z2 + 9, 8*z2 + 17, 4*z2 + 14, 20*z2 + 8), (21*z2 + 9, 3*z2 + 11, z2 + 21, 18*z2 + 18), (3*z2 + 7, z2 + 14, 20*z2 + 11, 17*z2 + 15), (18*z2 + 13, 9*z2 + 9, 10*z2 + 1, 13*z2 + 20), (7*z2 + 16, 3*z2 + 14, 16*z2 + 13, 14*z2 + 4), (3*z2 + 20, 13*z2 + 20, 10*z2 + 17, 8*z2 + 20), (13*z2 + 22, 11*z2 + 4, 5*z2 + 15, z2 + 15), (11*z2 + 21, 6*z2 + 12, 17*z2 + 21, 9*z2 + 6), (16*z2 + 13, 7*z2 + 11, 9*z2 + 16, 4*z2 + 8), (14*z2, 15*z2 + 11, 18*z2 + 15, 19), (z2 + 20, 7*z2 + 6, 17*z2 + 18, 22*z2 + 12), (7*z2 + 4, 15*z2 + 15, 20*z2 + 8, 3*z2 + 1), (4*z2 + 17, 20*z2 + 22, 6*z2 + 1, 2*z2 + 1), (15*z2 + 22, 22*z2 + 8, 7*z2 + 13, 8*z2 + 6), (21*z2 + 21, 9*z2 + 19, 10*z2 + 4, 15*z2 + 10), (9*z2 + 22, 22*z2 + 16, 9*z2 + 20, 8), (6*z2 + 21, 3*z2 + 19, 2*z2 + 18, 18*z2 + 14), (19*z2 + 10, 10*z2 + 21, 15*z2 + 12, 15*z2 + 15), (12*z2 + 6, 10*z2 + 8, 7*z2 + 13, z2 + 15), (22*z2 + 12, 17*z2 + 8, 17*z2 + 12, 11*z2 + 4), (7*z2 + 22, z2 + 12, 12*z2 + 7, 5*z2 + 15), (18*z2 + 2, 14*z2 + 14, 3*z2 + 21, 3*z2 + 13), (20*z2 + 3, 4, 4*z2 + 4, 5*z2 + 6), (19*z2 + 16, z2 + 10, 15*z2 + 1, 2*z2 + 11), (z2 + 14, 12*z2 + 10, 3*z2 + 6, 7*z2 + 14), (11*z2 + 15, 22*z2 + 17, 8*z2 + 7, 3*z2 + 14), (14*z2 + 15, 21*z2 + 11, 3*z2 + 22, 7*z2 + 9), (16*z2 + 5, 8*z2 + 21, 11*z2 + 15, 22*z2), (z2 + 8, 4*z2 + 21, 6*z2 + 6, 21*z2 + 3), (15*z2 + 20, 2, 7*z2 + 7, 14), (15*z2 + 20, 9*z2 + 14, 14*z2 + 11, 9*z2 + 4), (5*z2 + 8, 18*z2 + 16, 7*z2 + 18, 9*z2 + 20), (13*z2 + 9, 20*z2 + 8, 21*z2 + 2, 18*z2 + 5), (2*z2 + 11, 21*z2 + 20, 10*z2 + 21, 10*z2 + 21), (4*z2 + 7, 12*z2 + 8, 5*z2 + 8, 4*z2 + 16), (10*z2 + 11, 4*z2 + 18, 16*z2 + 20, 5), (17, 8*z2 + 15, 7*z2 + 19, 3*z2 + 14), (11*z2, 10*z2 + 2, 14*z2 + 4, 6*z2 + 20), (19*z2 + 3, 18*z2 + 1, 22*z2 + 2, 6*z2 + 4), (17*z2 + 11, 6*z2 + 22, 14*z2 + 20, 21*z2 + 9), (19*z2, 9*z2 + 15, 6*z2 + 8, 9*z2 + 16), (15*z2 + 15, 8*z2, 6*z2 + 1, 20*z2 + 5), (16, 19, 6*z2 + 14, 20*z2 + 17), (2*z2 + 22, 13*z2 + 14, 9*z2 + 8, 3*z2 + 20), (z2 + 10, 11*z2 + 19, 11*z2 + 22, 15*z2 + 11), (z2 + 14, z2 + 15, 5*z2 + 8, 8*z2 + 18), (z2 + 10, 7*z2 + 14, z2 + 3, 5*z2 + 18), (7*z2 + 2, 21*z2 + 19, 7*z2 + 5, 7*z2 + 6), (6*z2 + 18, 22*z2 + 4, 16*z2 + 6, 16*z2 + 8), (11*z2 + 13, 6*z2 + 11, 16*z2 + 17, 15*z2 + 3), (5*z2 + 22, 20*z2 + 19, 9*z2 + 22, 14*z2 + 14), (14*z2 + 9, 9*z2 + 3, z2 + 3, 17*z2 + 2), (15*z2 + 17, z2 + 7, 18*z2 + 18, 4*z2 + 13), (z2 + 17, 4*z2 + 14, 2*z2 + 9, 13*z2 + 5), (19*z2 + 17, 10*z2 + 20, 17, 5*z2 + 21), (12*z2 + 3, 8*z2 + 15, 22*z2 + 14, 2*z2 + 9), (9*z2 + 6, 18*z2 + 1, 21*z2 + 9, 6*z2 + 1), (18*z2 + 10, 16*z2 + 6, 10, 3*z2 + 14), (17*z2 + 3, 5*z2 + 19, 8*z2 + 21, 14*z2 + 15), (7*z2 + 20, 18*z2 + 18, 11*z2 + 4, z2 + 8), (22*z2 + 9, z2 + 3, 2*z2 + 17, 13*z2 + 9), (15*z2 + 9, 19*z2 + 9, 18*z2 + 7, 7), (22*z2 + 3, 18*z2 + 6, 16*z2 + 14, 22*z2 + 19), (11, 14*z2 + 6, 8*z2 + 20, 20*z2 + 22), (13*z2 + 21, 16*z2 + 4, 12*z2 + 19, 19*z2 + 20), (10*z2 + 3, 19*z2 + 1, 6*z2 + 2, 8*z2 + 14), (22*z2 + 9, 13*z2 + 16, 13*z2 + 8, 3*z2 + 9), (14*z2, 9*z2, 19*z2 + 6, 19), (21*z2, 13, 17*z2 + 6, 4*z2 + 7), (22*z2 + 13, 22*z2 + 21, 7*z2 + 16, z2 + 13), (z2 + 19, 22*z2 + 21, 9*z2, 6*z2 + 18), (21*z2 + 17, 3*z2 + 21, 14*z2 + 11, 6*z2 + 19), (5*z2 + 10, 16*z2 + 13, 9*z2, 14*z2 + 1), (5*z2 + 3, 10*z2 + 4, 6, 8), (2*z2 + 14, 5*z2 + 18, 16*z2 + 4, 13*z2 + 17), (8*z2, 18*z2 + 20, 6*z2 + 5, 2*z2 + 3), (17*z2 + 11, 13*z2 + 12, 8*z2 + 9, 20*z2 + 15), (7*z2 + 20, 17, 22*z2 + 6, 12*z2), (12*z2 + 20, 16*z2 + 14, 10*z2 + 22, 18*z2 + 6), (12*z2 + 19, 8*z2 + 1, 22*z2 + 9, 16*z2 + 8), (4*z2 + 10, 5*z2 + 5, z2 + 6, 5*z2 + 11), (13*z2 + 4, 21*z2 + 14, 8*z2 + 3, 16*z2 + 3), (4*z2 + 13, 8*z2 + 13, 19*z2 + 6, 4*z2 + 14), (17*z2 + 21, 21*z2 + 10, 10*z2 + 22, 11*z2 + 1), (21*z2 + 5, 21*z2 + 9, 7*z2 + 2, 12*z2), (z2 + 11, 6*z2 + 22, 6*z2 + 11, 13*z2 + 16), (3*z2 + 3, 9*z2 + 3, 17*z2 + 7, 15*z2 + 22), (3*z2 + 18, 20*z2 + 1, 13*z2 + 21, 20*z2 + 3), (19*z2 + 13, 11*z2 + 18, 16*z2 + 14, 3*z2 + 5), (13, 17*z2 + 8, 19*z2 + 13, 9*z2 + 22), (21*z2 + 11, 22*z2 + 12, 21*z2 + 21, 15*z2 + 14), (z2 + 20, 14*z2 + 8, 14*z2 + 20, 9*z2 + 16)]"
A = "[(5*z2 + 1, 15*z2 + 8, 7*z2 + 16, 10*z2 + 4), (0, 20, 22*z2 + 6, 8*z2 + 12), (0, 0, 22*z2 + 6, 20*z2 + 22), (0, 0, 0, 10*z2 + 16)]"

options = list(map(str, F.list()))

new_r = []

for z in r.replace("[", "").replace("]", "").replace("(", "").replace(")", "").split(", "):
    new_r.append(options.index(z))

r = []

for i in range(100):
    r.append(new_r[i * 4: i * 4 + 4])

new_A = []

for z in A.replace("[", "").replace("]", "").replace("(", "").replace(")", "").split(", "):
    new_A.append(options.index(z))

A = []

for i in range(4):
    A.append(new_A[i * 4: i * 4 + 4])

r = matrix(F, r)
A = matrix(F, A)

config = [
    (100, 85, 16),
    (100, 21, 80),
    (100, 19, 82),
    (100, 25, 76)
]

# print(r.nrows())
# print(r.ncols())
# print(r.inverse())
codewords = r * (A ** -1)
# print(codewords[:, 0])
# print(codewords[:, 0].nrows())
for j in range(1, 4):
    msg = []
    for i in range(100):
        msg.append(codewords[i, j])
    grsCode = codes.GeneralizedReedSolomonCode(F.list()[:config[j][0]], config[j][1])
    D = codes.decoders.GRSBerlekampWelchDecoder(grsCode)
    print(bytes(list(D.connected_encoder().unencode(D.decode_to_code(vector(F, msg))))))
