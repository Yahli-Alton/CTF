

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_21 = Integer(21); _sage_const_0xFFFFFF6F11B8034B = Integer(0xFFFFFF6F11B8034B); _sage_const_0x673420DAF2 = Integer(0x673420DAF2); _sage_const_2 = Integer(2); _sage_const_0x45EB817F02C = Integer(0x45EB817F02C); _sage_const_3 = Integer(3); _sage_const_0xFFFFFE3099503945 = Integer(0xFFFFFE3099503945); _sage_const_4 = Integer(4); _sage_const_0x18F8DCE1227 = Integer(0x18F8DCE1227); _sage_const_5 = Integer(5); _sage_const_0x26050EA6875 = Integer(0x26050EA6875); _sage_const_6 = Integer(6); _sage_const_0x298599C4BF0 = Integer(0x298599C4BF0); _sage_const_7 = Integer(7); _sage_const_0xFFFFF8A356CE9E58 = Integer(0xFFFFF8A356CE9E58); _sage_const_8 = Integer(8); _sage_const_0xFFFFFED3C712CF36 = Integer(0xFFFFFED3C712CF36); _sage_const_9 = Integer(9); _sage_const_0xFFFFFE96846D630F = Integer(0xFFFFFE96846D630F); _sage_const_10 = Integer(10); _sage_const_0x58CB1CE3FF3 = Integer(0x58CB1CE3FF3); _sage_const_11 = Integer(11); _sage_const_0xFFFFFCCF182C2A63 = Integer(0xFFFFFCCF182C2A63); _sage_const_12 = Integer(12); _sage_const_0xFFFFFE57FDF3F1DE = Integer(0xFFFFFE57FDF3F1DE); _sage_const_13 = Integer(13); _sage_const_0xFFFFFA603F35F962 = Integer(0xFFFFFA603F35F962); _sage_const_14 = Integer(14); _sage_const_0xFFFFFF7884570B57 = Integer(0xFFFFFF7884570B57); _sage_const_15 = Integer(15); _sage_const_0x4897C4D9C1 = Integer(0x4897C4D9C1); _sage_const_16 = Integer(16); _sage_const_0xFFFFFEB9355E5CB4 = Integer(0xFFFFFEB9355E5CB4); _sage_const_17 = Integer(17); _sage_const_0xDCEDF7D094 = Integer(0xDCEDF7D094); _sage_const_18 = Integer(18); _sage_const_0x3602E9CAC47 = Integer(0x3602E9CAC47); _sage_const_19 = Integer(19); _sage_const_0xFFFFFEE3667219D6 = Integer(0xFFFFFEE3667219D6); _sage_const_20 = Integer(20); _sage_const_0xFFFFFDC326C9B063 = Integer(0xFFFFFDC326C9B063); _sage_const_18446744073709551616 = Integer(18446744073709551616); _sage_const_64 = Integer(64)
with open("xor.txt", "r") as file:
    xors = file.read().split("\n")[:-_sage_const_1 ]
    xors = [int(a) for a in xors]

needed = [_sage_const_0 ] * _sage_const_21 
needed[_sage_const_0 ] = _sage_const_0xFFFFFF6F11B8034B 
needed[_sage_const_1 ] = _sage_const_0x673420DAF2 
needed[_sage_const_2 ] = _sage_const_0x45EB817F02C 
needed[_sage_const_3 ] = _sage_const_0xFFFFFE3099503945 
needed[_sage_const_4 ] = _sage_const_0x18F8DCE1227 
needed[_sage_const_5 ] = _sage_const_0x26050EA6875 
needed[_sage_const_6 ] = _sage_const_0x298599C4BF0 
needed[_sage_const_7 ] = _sage_const_0xFFFFF8A356CE9E58 
needed[_sage_const_8 ] = _sage_const_0xFFFFFED3C712CF36 
needed[_sage_const_9 ] = _sage_const_0xFFFFFE96846D630F 
needed[_sage_const_10 ] = _sage_const_0x58CB1CE3FF3 
needed[_sage_const_11 ] = _sage_const_0xFFFFFCCF182C2A63 
needed[_sage_const_12 ] = _sage_const_0xFFFFFE57FDF3F1DE 
needed[_sage_const_13 ] = _sage_const_0xFFFFFA603F35F962 
needed[_sage_const_14 ] = _sage_const_0xFFFFFF7884570B57 
needed[_sage_const_15 ] = _sage_const_0x4897C4D9C1 
needed[_sage_const_16 ] = _sage_const_0xFFFFFEB9355E5CB4 
needed[_sage_const_17 ] = _sage_const_0xDCEDF7D094 
needed[_sage_const_18 ] = _sage_const_0x3602E9CAC47 
needed[_sage_const_19 ] = _sage_const_0xFFFFFEE3667219D6 
needed[_sage_const_20 ] = _sage_const_0xFFFFFDC326C9B063 

F = Integers(_sage_const_18446744073709551616 )
# F = GF(18446744073709551616)
# F = GF(101)

xor_table = [xors[i * _sage_const_21 : (i + _sage_const_1 ) * _sage_const_21 ] for i in range(_sage_const_21 )]

print("generation")
b = vector(F, needed)
A = Matrix(F, xor_table)
print("solving")

# print(A.solve_right(b))

def right_kernel_mod_p_to_the_k(A, p=None, k=None):
    r"""
    Return the kernel of ``A`` modulo ``p^k``
    """
    if p is None or k is None:
        Z = A.base_ring()
        f = Z.cardinality().factor()
        if len(f) == _sage_const_1 :
            p, k = f[_sage_const_0 ]
        else:
            raise ValueError("either specify p and k or use matrix with " 
                             "base ring some p^k with p prime and k > 0")
    n = A.nrows()
    print("hi")
    # W = (Zmod(p)^n).list()
    print("hi")
    K = A.change_ring(Zmod(p)).right_kernel().list()
    print("hi")
    for j in range(_sage_const_2 , k + _sage_const_1 ):
        print(j)
        R = Zmod(p**j)
        V = R**n
        B = A.change_ring(R)
        W = [p * V(v) for v in W]
        K = [V(x) for x in K]
        # candidates
        C = (u + v for u in K for v in W)
        K = [x for x in C if (B*x).is_zero()]
    return K

print(right_kernel_mod_p_to_the_k(A, _sage_const_2 , _sage_const_64 ))

