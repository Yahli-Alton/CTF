# from pwn import *
# # s = "0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104"
# # lst = [109, bytes.fromhex(s)[1] ^ ord('r'), bytes.fromhex(s)[2] ^ ord('y'), bytes.fromhex(s)[3] ^ ord('p'), bytes.fromhex(s)[4] ^ ord('t'), bytes.fromhex(s)[5] ^ ord('o'), bytes.fromhex(s)[5] ^ ord('{')]
# # for i in range(6, len(s) // 2): lst.append(0)
# # # for i in range(16):
# # a = ""
# # for i in range(len(s) // 2): a += chr(bytes.fromhex(s)[i] ^ lst[i])
# # print(a)
# # # print(ord(xor('\x0e', 'c')))
# s = "0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104"

# print(xor(bytes.fromhex(s), "crypto{".encode()))
# print(xor(bytes.fromhex(s), b'myXORkey'))
# # print(xor(s, 0))

import math

from paramiko import RSAKey
# print(math.gcd(66528, 52920))

def gcdExtended(a, b):
 
    # Base Case
    if a == 0:
        return b, 0, 1
 
    gcd, x1, y1 = gcdExtended(b % a, a)
 
    # Update x and y using results of recursive
    # call
    x = y1 - (b//a) * x1
    y = x1
 
    return gcd, x, y
 
 
# lst = [14, 6, 11]
# for i in range(29): 
#    if ((i * i % 29) in lst): 
#       print(i, i * i % 29)

# p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139
# # ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]
# # for i in ints:
# #     if (pow(i, (p - 1) // 2, p) == 1):
# #         print(i)

# a = 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771
# print(pow(a, 2, p))
# print((p + 1) // 2)
# print(a / p)
# print(pow(a, (p + 1) // 4, p))
# print(pow(a, p, p))
# print(a ** 0.5)
# c = 41180130044976743732794625005729121090064394806595339925283179776208989523096169361548789178846901738691128518557930199978941111996201370771590176759376887544454127577092526695507989047249533525689183778351917071557077417261086536580546327666931451201076731428124135504802886235433109879651949180853727353747
# print(pow(c, 2, p))
# a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768
# p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161
# # print(pow(a, 2, p))
# print(((p - 1) // 32) * 32 == p - 1)
# # # print(a / p)
# print(pow(a, (p - 1) // 2, p))
# # print(pow(a, p, p))


# S = 5
# Q = (p - 1) // 32
# M = S


# for i in range(5, 935, 17):
#     if (i % 5 == 2 and i % 11 == 3): print(i)

# import base64
# import codecs
# s = "dGVsZXNjb3BlX3JlcHJvZHVjdGlvbl9lbmRsZXNz"
# print(base64.b64decode(s))
# a = "62726f777365725f696e737469747574655f616e616c79736573"
# print(bytes.fromhex(a))
# b = "frp_creel_guveq"
# print(codecs.encode(b, 'rot_13'))
# c = [104, 101, 108, 101, 110, 95, 102, 114, 111, 109, 95, 121, 101, 115]
# e = ""
# for i in c: e += chr(i)
# print(e)
# d = "0x656d706c6f7965655f6a61636b736f6e5f6e6f72746865617374"
# print(bytes.fromhex(d[2:]))

# import hashlib
# import random
# with open("./words.txt") as f:
#     words = [w.strip() for w in f.readlines()]
# keyword = random.choice(words)
# print(hashlib.md5(keyword.encode()).digest().hex())
# k = "Zola"
# print(hashlib.md5(k.encode()).digest().hex())
# print(keyword)

# for i in range(28151):
#     g = i
#     count = 1
#     while (g != 1):
#         g = g * i % 28151
#         count += 1
#     if (count > 28149):
#         print(i)

# from Crypto.PublicKey import RSA
# with open("./transparency_afff0345c6f99bf80eab5895458d8eab.pem") as f:
#     key = RSA.importKey(f.read())
#     a = RSA.
# print(key.public_key)
# print(key.publickey().exportKey())

# import pem
# certs = pem.parse_file("transparency_afff0345c6f99bf80eab5895458d8eab.pem")
# print(certs)
# print(str(certs[0]))

# from asn1crypto.x509 import Certificate

# with open("2048b-rsa-example-cert_3220bd92e30015fe4fbeb84a755e7ca5.der", "rb") as f:
#     cert = Certificate.load(f.read())

# n = cert.public_key.native["public_key"]["modulus"]
# e = cert.public_key.native["public_key"]["public_exponent"]

# print("{:#x}".format(n))    # prints the modulus (hexadecimal)
# # print("{:#x}".format(e))    # same, for the public exponent

# with open('bruce_rsa_6e7ecd53b443a97013397b1a1ea30e14.pub', mode='rb') as public_file:
#     key_data = public_file.read()
#     public_key = RSAKey.PublicKey.load_pkcs1_openssl_pem(key_data)

from OpenSSL import crypto

cert_file = "transparency_afff0345c6f99bf80eab5895458d8eab.pem"
cert = crypto.load_certificate(crypto.FILETYPE_PEM, open(cert_file).read())
subject = cert.get_subject()
issued_to = subject.CN    # the Common Name field
issuer = cert.get_issuer()
issued_by = issuer.CN